"""
Django settings for healthcare project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-j_*5epx2@-il10s2we&-lz@vpyiq9k5#mgqzyay^044wm)99wi"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_filters",

    # All Services
    "auth_service",
    "doctor_service",
    "nurse_service",
    "patient_service",
    "administrator_service",
    "pharmacist_service",
    "insurance_provider_service",
    "laboratory_technician_service",
    "medicine_service",
    "pharmacy_service",
    "inventory_service",
    "payment_service",
    "insurance_service",
    "prescription_service",
    "medical_record_service",
    "laboratory_service",
    "template_service",
    "appointment_service"
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'SECRET_KEY',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

AUTH_USER_MODEL = 'auth_service.User'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "healthcare.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'template_service/templates')],  # Added template directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "healthcare.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Use environment variables or default for database configuration
# This makes it work in both Docker and local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'healthcare_users',
        'USER': 'healthcare',
        'PASSWORD': 'healthcare_password',
        'HOST': os.environ.get('DB_HOST_MYSQL', 'localhost'),  # Use 'mysql' when running in Docker
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    },
    'pharmacy_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'healthcare_pharmacy',
        'USER': 'healthcare',
        'PASSWORD': 'healthcare_password',
        'HOST': os.environ.get('DB_HOST_POSTGRES', 'localhost'),  # Use 'postgres' when running in Docker
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',  # Disable SSL for local development
        },
    },
    # In development, use MongoDB without authentication for simplicity
    'medicine_db': {
        'ENGINE': 'djongo',
        'NAME': 'healthcare_medicines',
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': f"mongodb://{os.environ.get('DB_HOST_MONGODB', 'localhost')}:27017",  # Use 'mongodb' when running in Docker
        }
    },
    # Prescription database using MongoDB
    'prescription_db': {
        'ENGINE': 'djongo',
        'NAME': 'healthcare_prescriptions',
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': f"mongodb://{os.environ.get('DB_HOST_MONGODB', 'localhost')}:27017",  # Use 'mongodb' when running in Docker
        }
    },
    # Medical Record database using MongoDB
    'medical_record_db': {
        'ENGINE': 'djongo',
        'NAME': 'healthcare_medical_records',
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': f"mongodb://{os.environ.get('DB_HOST_MONGODB', 'localhost')}:27017",  # Use 'mongodb' when running in Docker
        }
    },
    # Laboratory database using PostgreSQL
    'laboratory_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'healthcare_laboratory',
        'USER': 'healthcare',
        'PASSWORD': 'healthcare_password',
        'HOST': os.environ.get('DB_HOST_POSTGRES', 'localhost'),  # Use 'postgres' when running in Docker
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',  # Disable SSL for local development
        },
    },
    # Inventory database using MongoDB
    'inventory_db': {
        'ENGINE': 'djongo',
        'NAME': 'healthcare_inventory',
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': f"mongodb://{os.environ.get('DB_HOST_MONGODB', 'localhost')}:27017",
        }
    },
    # Insurance database using PostgreSQL
    'insurance_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'healthcare_insurance',
        'USER': 'healthcare',
        'PASSWORD': 'healthcare_password',
        'HOST': os.environ.get('DB_HOST_POSTGRES', 'localhost'),
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',
        },
    },
    # Payment database using PostgreSQL
    'payment_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'healthcare_payment',
        'USER': 'healthcare',
        'PASSWORD': 'healthcare_password',
        'HOST': os.environ.get('DB_HOST_POSTGRES', 'localhost'),
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',
        },
    },
    # Appointment database using PostgreSQL
    'appointment_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'healthcare_appointment',
        'USER': 'healthcare',
        'PASSWORD': 'healthcare_password',
        'HOST': os.environ.get('DB_HOST_POSTGRES', 'localhost'),
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'disable',
        },
    }
}

# Database router for directing models to specific databases
DATABASE_ROUTERS = ['healthcare.database_routers.DatabaseRouter']

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "template_service/static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Shared secret for internal service-to-service communication
# IMPORTANT: Change this key to a strong, unique value and keep it secret!


